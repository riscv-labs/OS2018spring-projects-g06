//+++ common
#define _GNU_SOURCE 1
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <setjmp.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <stdint.h>
#include <stdbool.h>
#include "fstest.h"

__attribute__((__unused__)) static void
init_map_anon(uintptr_t va, bool writable, char value)
{
  char *r = mmap((void*)va, 4096, PROT_READ | PROT_WRITE,
                 MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
  if (r == MAP_FAILED) setup_error("mmap");
  *r = value;
  if (!writable) {
    int r2 = mprotect(r, 4096, PROT_READ);
    if (r2 < 0) setup_error("mprotect");
  }
  // Ensure test cores don't shoot down the setup core
  xinvalidate(r, 4096);
}

__attribute__((__unused__)) static void
init_map_file(uintptr_t va, bool writable, const char *fname, off_t offset)
{
  int fd = open(fname, O_RDWR);
  if (fd < 0) setup_error("open");
  void *r = mmap((void*)va, 4096, PROT_READ | (writable ? PROT_WRITE : 0),
                 MAP_SHARED | MAP_FIXED, fd, offset);
  if (r == MAP_FAILED) setup_error("mmap");
  close(fd);
}

__attribute__((__weak__)) const char dataval0[4096] = {0};
__attribute__((__weak__)) const char dataval1[4096] = {1};
__attribute__((__weak__)) const char dataval2[4096] = {2};
__attribute__((__weak__)) const char dataval3[4096] = {3};
__attribute__((__weak__)) const char dataval4[4096] = {4};
__attribute__((__weak__)) const char dataval5[4096] = {5};
__attribute__((__weak__)) const char dataval6[4096] = {6};
__attribute__((__weak__)) const char dataval7[4096] = {7};
__attribute__((__weak__)) const char dataval8[4096] = {8};
__attribute__((__weak__)) const char dataval9[4096] = {9};
__attribute__((__weak__)) const char dataval10[4096] = {10};
__attribute__((__weak__)) const char dataval11[4096] = {11};
__attribute__((__weak__)) const char dataval12[4096] = {12};
__attribute__((__weak__)) const char dataval13[4096] = {13};
__attribute__((__weak__)) const char dataval14[4096] = {14};
__attribute__((__weak__)) const char dataval15[4096] = {15};
__attribute__((__weak__)) char datavalbuf[4096];

//+++ tests

/*
 * calls: mmap write
 */
static int test_mmap_write_pfe_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
static int test_mmap_write_pfe_0_1(void) {
  ssize_t r = write(10, dataval0, 4096);
  expect_result("r", r, -1);
  expect_errno(32);
  if (r <= 0) return xerrno(r);
  return r;
}
static void setup_mmap_write_pfe_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfe_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pfe_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pfe_0_final(void) {
  unlink("__i0");
  close(20);
  close(21);
}
static void setup_mmap_write_pfe_0_procfinal(void) {
  close(20);
  close(21);
}

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
static int test_mmap_write_pfe_1_1(void) {
  ssize_t r = write(11, dataval0, 4096);
  expect_result("r", r, -1);
  expect_errno(32);
  if (r <= 0) return xerrno(r);
  return r;
}
// static void setup_mmap_write_pfe_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pfe_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfe_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfe_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfe_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
static void setup_mmap_write_pfe_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfe_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pfe_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pfe_4_final(void) {
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
static void setup_mmap_write_pfe_4_procfinal(void) {
  close(20);
  close(21);
  close(22);
  close(23);
}

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pfe_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfe_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pfe_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfe_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
static void setup_mmap_write_pfe_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfe_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
static void setup_mmap_write_pfe_8_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
}
// static void setup_mmap_write_pfe_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
static void setup_mmap_write_pfe_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfe_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
static void setup_mmap_write_pfe_9_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_mmap_write_pfe_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfe_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_8_common
static void setup_mmap_write_pfe_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfe_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_12_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_13_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfe_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_14_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_8_common
static void setup_mmap_write_pfe_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_14_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfe_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_15_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_9_common
static void setup_mmap_write_pfe_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_9_final
// static void setup_mmap_write_pfe_15_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_16_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_8_common
static void setup_mmap_write_pfe_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_16_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfe_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_17_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_18_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pfe_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfe_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_18_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfe_18_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_19_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pfe_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfe_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfe_19_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_20_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfe_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfe_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_21_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfe_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_22_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_23_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pfe_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfe_23_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_24_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_9_common
static void setup_mmap_write_pfe_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_24_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_9_final
// static void setup_mmap_write_pfe_24_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_25_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pfe_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfe_25_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_26_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_8_common
static void setup_mmap_write_pfe_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfe_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfe_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfe_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_27_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfe_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfe_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_28_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pfe_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfe_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfe_28_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_29_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pfe_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfe_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pfe_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfe_29_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfe_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfe_30_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pfe_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pfe_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfe_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pfe_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfe_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
static int test_mmap_write_pfc_0_1(void) {
  ssize_t r = write(11, dataval0, 4096);
  expect_result("r", r, 4096);
  if (r <= 0) return xerrno(r);
  return r;
}
static void setup_mmap_write_pfc_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfc_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pfc_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfc_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pfc_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pfc_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfc_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_9_final
// static void setup_mmap_write_pfc_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pfc_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pfc_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfc_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pfc_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfc_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_12_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pfc_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_12_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_13_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfc_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_14_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_15_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pfc_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_16_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pfc_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_16_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_17_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_6_common
static void setup_mmap_write_pfc_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_17_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_9_final
// static void setup_mmap_write_pfc_17_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_18_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pfc_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_19_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_20_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_21_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_21_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_22_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_23_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfc_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_24_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pfc_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_write_pfe_20_proc0
// static void setup_mmap_write_pfc_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_25_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfc_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_26_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pfc_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_26_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_27_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfc_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_28_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pfc_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pfe_27_proc0
// static void setup_mmap_write_pfc_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_29_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_29_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_30_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_31_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pfc_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_31_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_32_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
// static void setup_mmap_write_pfc_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_write_pfe_26_proc0
// static void setup_mmap_write_pfc_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_32_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_33_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_6_common
static void setup_mmap_write_pfc_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_33_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_9_final
// static void setup_mmap_write_pfc_33_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_34_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pfc_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_34_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pfc_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_35_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_6_common
static void setup_mmap_write_pfc_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pfc_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_35_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_9_final
// static void setup_mmap_write_pfc_35_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_36_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_37_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pfc_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_37_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_37_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_38_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfc_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_38_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_39_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfc_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_39_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_39_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_40_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pfc_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfc_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pfc_40_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pfc_40_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pfc_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pfc_41_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pfc_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pfc_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pfc_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pfc_41_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pfc_41_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
static int test_mmap_write_pf8_0_1(void) {
  ssize_t r = write(10, dataval0, 4096);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r <= 0) return xerrno(r);
  return r;
}
static void setup_mmap_write_pf8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pf8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
static int test_mmap_write_pf8_1_1(void) {
  ssize_t r = write(11, dataval0, 4096);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r <= 0) return xerrno(r);
  return r;
}
// static void setup_mmap_write_pf8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pf8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pf8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
static void setup_mmap_write_pf8_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pf8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pf8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pf8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pf8_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pf8_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_10_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_12_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_13_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_14_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pf8_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_14_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_15_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_16_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_17_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_18_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pf8_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_19_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pf8_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_19_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_20_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf8_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_21_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pf8_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf8_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_21_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf8_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_22_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf8_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_23_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf8_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_24_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf8_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_25_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf8_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf8_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf8_26_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pf8_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pf8_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf8_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf8_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf8_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_write_pf4_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_mmap_write_pf4_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
}
static void setup_mmap_write_pf4_0_final(void) {
  unlink("__i0");
}
static void setup_mmap_write_pf4_0_procfinal(void) {
  
}

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pf4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pf4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
static void setup_mmap_write_pf4_2_final(void) {
  unlink("__i1");
  unlink("__i0");
}
// static void setup_mmap_write_pf4_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pf4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf4_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
static void setup_mmap_write_pf4_4_final(void) {
  unlink("__i0");
  unlink("__i1");
}
// static void setup_mmap_write_pf4_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pf4_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pf4_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
static void setup_mmap_write_pf4_6_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
}
// static void setup_mmap_write_pf4_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pf4_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf4_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i2", 0x5000);
}
// static void setup_mmap_write_pf4_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
static void setup_mmap_write_pf4_8_final(void) {
  unlink("__i1");
  unlink("__i0");
  unlink("__i2");
}
// static void setup_mmap_write_pf4_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pf4_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 9986048, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf4_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_pf4_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf4_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_11_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf4_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf4_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_12_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_12_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_write_pf4_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf4_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_13_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_pf4_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x20ad000);
}
// static void setup_mmap_write_pf4_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_14_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_pf4_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf4_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_15_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_15_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pf4_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_16_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_4_common
static void setup_mmap_write_pf4_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_write_pf4_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_16_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_17_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
static void setup_mmap_write_pf4_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 9990144, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_write_pf4_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_17_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_18_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_18_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf4_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_19_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_pf4_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pf4_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_19_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_20_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_pf4_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x6000);
}
// static void setup_mmap_write_pf4_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_20_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_21_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_21_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_21_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_22_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_22_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf4_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf4_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_23_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_23_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf4_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_23_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_24_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_pf4_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf4_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_24_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_25_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pf4_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf4_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_25_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_26_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_21_common
static void setup_mmap_write_pf4_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x3000);
}
// static void setup_mmap_write_pf4_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_26_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_26_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_27_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_27_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_write_pf4_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf4_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_27_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf4_27_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_28_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_28_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x3000);
}
// static void setup_mmap_write_pf4_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_28_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_29_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_21_common
static void setup_mmap_write_pf4_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf4_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_29_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_29_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_30_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_30_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i2", 0x5000);
}
// static void setup_mmap_write_pf4_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
static void setup_mmap_write_pf4_30_final(void) {
  unlink("__i0");
  unlink("__i2");
  unlink("__i1");
  close(20);
  close(21);
}
// static void setup_mmap_write_pf4_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_31_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_31_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf4_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf4_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_32_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
static void setup_mmap_write_pf4_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pf4_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_32_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_33_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
static void setup_mmap_write_pf4_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf4_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_33_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_34_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_34_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x6000);
}
// static void setup_mmap_write_pf4_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_34_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf4_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_35_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pf4_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0xf000);
}
// static void setup_mmap_write_pf4_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_35_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_36_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_36_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pf4_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_36_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_37_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_37_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_37_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_38_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_4_common
static void setup_mmap_write_pf4_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x6000);
}
// static void setup_mmap_write_pf4_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_38_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_38_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_39_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_18_common
static void setup_mmap_write_pf4_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x6000);
}
// static void setup_mmap_write_pf4_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_39_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_40_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_12_common
static void setup_mmap_write_pf4_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf4_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_40_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_40_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_41_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pf4_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_41_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_42_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_42_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
static void setup_mmap_write_pf4_42_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf4_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_42_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_42_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_43_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_43_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf4_43_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_mmap_write_pf4_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_43_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_43_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_44_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_44_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_44_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_44_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_44_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf4_44_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_45_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_45_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_44_common
static void setup_mmap_write_pf4_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_mmap_write_pf4_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_45_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf4_45_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_46_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_46_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
static void setup_mmap_write_pf4_46_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_46_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_46_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_47_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_47_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_47_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_write_pf4_47_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i2", 0x5000);
}
// static void setup_mmap_write_pf4_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
static void setup_mmap_write_pf4_47_final(void) {
  unlink("__i0");
  unlink("__i2");
  unlink("__i1");
}
// static void setup_mmap_write_pf4_47_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_48_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_48_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_27_common
static void setup_mmap_write_pf4_48_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1c2000);
}
// static void setup_mmap_write_pf4_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_48_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf4_48_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_49_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_49_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_49_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
static void setup_mmap_write_pf4_49_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1c3000);
}
// static void setup_mmap_write_pf4_49_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_49_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_49_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_50_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_50_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_50_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pf4_50_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_50_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_50_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_50_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_51_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_51_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_51_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_12_common
static void setup_mmap_write_pf4_51_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x476000);
}
// static void setup_mmap_write_pf4_51_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_51_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf4_51_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_52_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_52_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_52_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf4_52_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7364608, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_52_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_52_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_52_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_53_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_53_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_53_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pf4_53_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
}
// static void setup_mmap_write_pf4_53_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_53_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_53_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_54_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_54_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_54_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pf4_54_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_54_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_54_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_54_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_55_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_55_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf4_55_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pf4_55_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pf4_55_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_55_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_55_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_56_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_56_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_56_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_56_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_56_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_56_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf4_56_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_57_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_57_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_57_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_57_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i2", 0x1000);
}
// static void setup_mmap_write_pf4_57_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
static void setup_mmap_write_pf4_57_final(void) {
  unlink("__i0");
  unlink("__i1");
  unlink("__i2");
  close(20);
  close(21);
}
// static void setup_mmap_write_pf4_57_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_58_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_58_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_58_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_58_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf4_58_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_58_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf4_58_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_59_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_59_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_59_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_59_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x7000);
}
// static void setup_mmap_write_pf4_59_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_59_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf4_59_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_60_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_60_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_60_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf4_60_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf4_60_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf4_60_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf4_60_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf4_61_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf4_61_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf4_61_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf4_61_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf4_61_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf4_61_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf4_61_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pf0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_pf0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pf0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pf0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pf0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_36_common
static void setup_mmap_write_pf0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pf0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
static void setup_mmap_write_pf0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pf0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_pf0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pf0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_pf0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
static void setup_mmap_write_pf0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pf0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_11_common
static void setup_mmap_write_pf0_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x20ad000);
}
// static void setup_mmap_write_pf0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_10_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf0_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i2", 0x5000);
}
// static void setup_mmap_write_pf0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_10_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_47_final
// static void setup_mmap_write_pf0_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_12_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2297000);
}
// static void setup_mmap_write_pf0_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_13_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pf0_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_14_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
// static void setup_mmap_write_pf0_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i1", 0x5000);
// }
// ^ See setup_mmap_write_pf4_12_proc0
// static void setup_mmap_write_pf0_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_14_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_15_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_common
static void setup_mmap_write_pf0_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_write_pf0_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_16_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf0_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_17_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pf0_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_mmap_write_pf0_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_18_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_18_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf0_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf0_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_18_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_19_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
static void setup_mmap_write_pf0_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pf0_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_19_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf0_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_20_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_4_common
static void setup_mmap_write_pf0_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf0_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_20_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_20_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_21_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
static void setup_mmap_write_pf0_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x3000);
}
// static void setup_mmap_write_pf0_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf0_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_22_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_22_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf0_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i2", 0x5000);
}
// static void setup_mmap_write_pf0_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
static void setup_mmap_write_pf0_22_final(void) {
  unlink("__i1");
  unlink("__i0");
  unlink("__i2");
  close(20);
  close(21);
}
// static void setup_mmap_write_pf0_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_23_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_common
// static void setup_mmap_write_pf0_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i1", 0x5000);
// }
// ^ See setup_mmap_write_pf4_27_proc0
// static void setup_mmap_write_pf0_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_23_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_23_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_24_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_pf0_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf0_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_24_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_25_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_2_common
// static void setup_mmap_write_pf0_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i1", 0x5000);
// }
// ^ See setup_mmap_write_pf4_29_proc0
// static void setup_mmap_write_pf0_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_25_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_25_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_26_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
static void setup_mmap_write_pf0_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pf0_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_26_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_26_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_27_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_27_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf0_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x16dd000);
}
// static void setup_mmap_write_pf0_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_27_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_28_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_pf0_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf0_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_28_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_29_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pf0_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf0_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf0_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_30_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_30_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf0_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pf0_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_30_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf0_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_31_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_30_common
static void setup_mmap_write_pf0_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x4000);
}
// static void setup_mmap_write_pf0_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_31_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf0_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_32_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_pf0_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf0_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_32_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_33_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
static void setup_mmap_write_pf0_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pf0_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_33_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf0_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_34_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_21_common
static void setup_mmap_write_pf0_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf0_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_34_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_34_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_35_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_21_common
static void setup_mmap_write_pf0_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pf0_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_35_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_35_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_36_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_pf0_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf0_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_36_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_37_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_pf0_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36290560, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x4000);
}
// static void setup_mmap_write_pf0_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_37_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_38_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_21_common
static void setup_mmap_write_pf0_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x3000);
}
// static void setup_mmap_write_pf0_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_38_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_38_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_39_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_39_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf0_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i2", 0x5000);
}
// static void setup_mmap_write_pf0_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_39_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_47_final
// static void setup_mmap_write_pf0_39_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_40_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
static void setup_mmap_write_pf0_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x3000);
}
// static void setup_mmap_write_pf0_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_40_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf0_40_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_41_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_pf0_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x4000);
}
// static void setup_mmap_write_pf0_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_41_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_42_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_42_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pf0_42_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf0_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_42_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf0_42_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_43_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_43_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_44_common
static void setup_mmap_write_pf0_43_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x704000);
}
// static void setup_mmap_write_pf0_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_43_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf0_43_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_44_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_44_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_44_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf0_44_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pf0_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_44_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf0_44_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_45_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_45_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_common
static void setup_mmap_write_pf0_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_write_pf0_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_45_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_45_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_46_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_46_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_46_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pf0_46_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x3000);
}
// static void setup_mmap_write_pf0_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_46_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_46_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_47_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_47_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_common
static void setup_mmap_write_pf0_47_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf0_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_47_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pf0_47_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_48_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_48_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_4_common
static void setup_mmap_write_pf0_48_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf0_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_48_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pf0_48_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_49_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_49_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_49_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_49_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pf0_49_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_49_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_49_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_50_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_50_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_50_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pf0_50_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36282368, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x119000);
}
// static void setup_mmap_write_pf0_50_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_50_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_50_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_51_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_51_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_51_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pf0_51_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 34275328, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x20b0000);
}
// static void setup_mmap_write_pf0_51_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_51_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_51_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_52_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_52_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_52_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_pf0_52_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x4000);
}
// static void setup_mmap_write_pf0_52_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_52_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_52_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_53_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_53_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_53_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_53_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pf0_53_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_53_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_53_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_54_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_54_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_54_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_6_common
static void setup_mmap_write_pf0_54_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x704000);
}
// static void setup_mmap_write_pf0_54_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_54_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf0_54_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_55_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_55_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_55_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf0_55_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i2", 0x5000);
}
// static void setup_mmap_write_pf0_55_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_55_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_30_final
// static void setup_mmap_write_pf0_55_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_56_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_56_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_56_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf0_56_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x8ea000);
}
// static void setup_mmap_write_pf0_56_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_56_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf0_56_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_57_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_57_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_57_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf0_57_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pf0_57_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_57_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pf0_57_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_58_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_58_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_58_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pf0_58_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x119000);
}
// static void setup_mmap_write_pf0_58_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_58_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf0_58_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_59_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_59_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_pf0_59_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pf0_59_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_mmap_write_pf4_60_proc0
// static void setup_mmap_write_pf0_59_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_59_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pf0_59_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_60_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_60_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_60_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pf0_60_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36278272, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pf0_60_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pf0_60_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pf0_60_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pf0_61_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pf0_61_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pf0_61_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_6_common
// static void setup_mmap_write_pf0_61_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_write_pf4_42_proc0
// static void setup_mmap_write_pf0_61_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pf0_61_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pf0_61_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
static void setup_mmap_write_pe0_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
}
// static void setup_mmap_write_pe0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_pe0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pe0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pe0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pe0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pe0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pe0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
static void setup_mmap_write_pe0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pe0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_2_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_pe0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pe0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pe0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pe0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pe0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pe0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
static void setup_mmap_write_pe0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pe0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_4_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_pe0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pe0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pe0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pe0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pe0_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pe0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pe0_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pe0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pe0_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pe0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pe0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pe0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pe0_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pe0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pe0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pe0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pe0_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pe0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pe0_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pe0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pe0_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pe0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pe0_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pe0_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_pde_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pde_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pde_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_pde_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
static void setup_mmap_write_pde_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pde_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pde_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pde_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pde_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pde_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
static void setup_mmap_write_pde_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pde_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pde_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pde_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
static void setup_mmap_write_pde_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pde_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_30_common
static void setup_mmap_write_pde_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pde_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pde_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_pde_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_6_proc0
// static void setup_mmap_write_pde_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pde_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_9_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
static void setup_mmap_write_pde_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pde_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
static void setup_mmap_write_pde_9_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_mmap_write_pde_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_10_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_9_common
static void setup_mmap_write_pde_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pde_10_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_11_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
static void setup_mmap_write_pde_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pde_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pde_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_12_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pde_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_13_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_14_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_15_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_30_common
static void setup_mmap_write_pde_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_write_pde_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pde_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_16_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pde_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_17_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_pde_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_9_proc0
// static void setup_mmap_write_pde_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_17_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_18_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_pde_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_10_proc0
// static void setup_mmap_write_pde_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_18_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_18_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_19_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_pde_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_11_proc0
// static void setup_mmap_write_pde_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pde_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_20_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_21_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_pde_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_20_proc0
// static void setup_mmap_write_pde_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pde_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_22_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
static void setup_mmap_write_pde_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_22_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_23_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_9_common
// static void setup_mmap_write_pde_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_22_proc0
// static void setup_mmap_write_pde_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_23_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pde_23_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_24_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_9_common
static void setup_mmap_write_pde_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_24_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pde_24_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_25_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
static void setup_mmap_write_pde_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pde_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pde_25_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pde_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_26_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_pde_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_24_proc0
// static void setup_mmap_write_pde_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_26_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_27_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_pde_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_write_pde_25_proc0
// static void setup_mmap_write_pde_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pde_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_28_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pde_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_29_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
static void setup_mmap_write_pde_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pde_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_29_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_30_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
static void setup_mmap_write_pde_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pde_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_30_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_31_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
static void setup_mmap_write_pde_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pde_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_31_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_32_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pde_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_32_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_33_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
static void setup_mmap_write_pde_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pde_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pde_33_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pde_33_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pde_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pde_34_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pde_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_pde_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pde_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pde_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pde_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
static int test_mmap_write_pdc_0_1(void) {
  ssize_t r = write(10, dataval0, 4096);
  expect_result("r", r, 4096);
  if (r <= 0) return xerrno(r);
  return r;
}
// static void setup_mmap_write_pdc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pdc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pdc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pdc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pdc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pdc_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_write_pdc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pdc_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_pdc_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pdc_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pdc_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pdc_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pdc_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pdc_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_pdc_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pdc_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_pdc_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pdc_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pdc_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pdc_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_9_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pdc_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_10_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_11_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_7_common
static void setup_mmap_write_pdc_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_write_pdc_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pdc_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_12_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pdc_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_13_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pdc_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_write_pf8_2_proc0
// static void setup_mmap_write_pdc_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_14_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_15_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pdc_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_14_proc0
// static void setup_mmap_write_pdc_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pdc_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_16_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
static void setup_mmap_write_pdc_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_16_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pdc_16_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_17_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pdc_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_18_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pdc_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_5_proc0
// static void setup_mmap_write_pdc_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_18_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_19_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_pdc_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_16_proc0
// static void setup_mmap_write_pdc_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_19_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_20_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pdc_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_20_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_21_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pdc_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_22_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_23_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pdc_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pfe_5_proc0
// static void setup_mmap_write_pdc_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_24_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_24_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_25_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_pdc_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_24_proc0
// static void setup_mmap_write_pdc_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_25_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pdc_25_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_26_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pdc_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pfe_5_proc0
// static void setup_mmap_write_pdc_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_26_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pdc_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_27_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pdc_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_22_proc0
// static void setup_mmap_write_pdc_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_27_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pdc_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_28_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_28_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_29_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
static void setup_mmap_write_pdc_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_29_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pdc_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_30_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_pdc_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_28_proc0
// static void setup_mmap_write_pdc_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_30_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pdc_30_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_31_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pdc_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_31_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_32_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_32_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_33_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_write_pdc_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_33_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_33_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_34_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pdc_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_32_proc0
// static void setup_mmap_write_pdc_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_34_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pdc_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_35_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_pdc_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_33_proc0
// static void setup_mmap_write_pdc_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_35_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pdc_35_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_36_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pdc_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_write_pdc_29_proc0
// static void setup_mmap_write_pdc_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_37_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pdc_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_write_pde_2_proc0
// static void setup_mmap_write_pdc_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_37_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_38_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_write_pdc_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_38_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_38_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_39_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pdc_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_39_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_40_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
static void setup_mmap_write_pdc_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pdc_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pdc_40_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pdc_40_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pdc_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pdc_41_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pdc_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
static void setup_mmap_write_pdc_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_write_pdc_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pdc_41_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pdc_41_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd8_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pd8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pd8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pd8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pd8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pd8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd8_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pd8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pd8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_write_pdc_2_proc0
// static void setup_mmap_write_pd8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pd8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pd8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd8_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd8_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pd8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pd8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_write_pd8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pd8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pd8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd8_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd8_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pd8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pd8_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_write_pd8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pd8_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pd8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd8_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd8_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pd8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pd8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_write_pdc_12_proc0
// static void setup_mmap_write_pd8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pd8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pd8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd8_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd8_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pd8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_5_common
static void setup_mmap_write_pd8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_write_pd8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pd8_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pd8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd8_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd8_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pd8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pd8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_write_pd8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pd8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pd8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pd4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pd4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd4_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pd4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_write_pe0_2_proc0
// static void setup_mmap_write_pd4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd4_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_27_common
static void setup_mmap_write_pd4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_write_pd4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pd4_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pd4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x704000);
}
// static void setup_mmap_write_pd4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd4_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_pd4_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x20ad000);
}
// static void setup_mmap_write_pd4_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd4_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_27_common
static void setup_mmap_write_pd4_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_write_pd4_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pd4_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pd4_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_mmap_write_pe0_3_proc0
// static void setup_mmap_write_pd4_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd4_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pd4_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_mmap_write_pe0_5_proc0
// static void setup_mmap_write_pd4_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd4_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd4_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd4_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd4_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pd4_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_write_pe0_4_proc0
// static void setup_mmap_write_pd4_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd4_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd4_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pd0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pd0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pd0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_write_pe0_2_proc0
// static void setup_mmap_write_pd0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_pd0_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_pd0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x2297000);
}
// static void setup_mmap_write_pd0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pd0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
// static void setup_mmap_write_pd0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x704000);
// }
// ^ See setup_mmap_write_pd4_3_proc0
static void setup_mmap_write_pd0_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pd0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pd0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_write_pe0_4_proc0
// static void setup_mmap_write_pd0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pd0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
static void setup_mmap_write_pd0_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pd0_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd0_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
// static void setup_mmap_write_pd0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i1", 0x5000);
// }
// ^ See setup_mmap_write_pd4_5_proc0
// static void setup_mmap_write_pd0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd0_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pd0_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_pd0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_write_pd0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd0_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pd0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pd0_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pd0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pd0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_mmap_write_pe0_5_proc0
// static void setup_mmap_write_pd0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pd0_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pd0_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pc0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pc0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pc0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_pc0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pc0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pc0_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_pc0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pc0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pc0_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pc0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_pc0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_write_pe0_2_proc0
// static void setup_mmap_write_pc0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pc0_1_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_pc0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pc0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pc0_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pc0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pc0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_mmap_write_pe0_3_proc0
// static void setup_mmap_write_pc0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pc0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pc0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pc0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pc0_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pc0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_pc0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_write_pe0_4_proc0
// static void setup_mmap_write_pc0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pc0_3_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_pc0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pc0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pfe_0_0
// static int test_mmap_write_pc0_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pc0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pc0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_mmap_write_pe0_5_proc0
// static void setup_mmap_write_pc0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pc0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pc0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_pbf8_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static int test_mmap_write_pbf8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pbf8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
static void setup_mmap_write_pbf8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pbf8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pbf8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pbf8_0_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf8_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
static void setup_mmap_write_pbf8_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pbf8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_0_proc0
// static void setup_mmap_write_pbf8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pbf8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pbf8_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf8_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf8_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pbf8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
// static void setup_mmap_write_pbf8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc0
// static void setup_mmap_write_pbf8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pbf8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pbf8_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf8_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf8_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pbf8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_1_common
// static void setup_mmap_write_pbf8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc0
// static void setup_mmap_write_pbf8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_pbf8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pbf8_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf8_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf8_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_pbf8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pbf8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pbf8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pbf8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbf8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf8_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf8_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
static void setup_mmap_write_pbf8_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pbf8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_4_proc0
// static void setup_mmap_write_pbf8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pbf8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbf8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf8_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf8_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pbf8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_pbf8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pbf8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_pbf8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbf8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pbf0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_0_proc0
// static void setup_mmap_write_pbf0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbf0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbf0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pbf0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_0_proc0
// static void setup_mmap_write_pbf0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbf0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbf0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_pbf0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc0
// static void setup_mmap_write_pbf0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbf0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pbf0_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pbf0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_9_proc0
// static void setup_mmap_write_pbf0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbf0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbf0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_pbf0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_2_proc0
// static void setup_mmap_write_pbf0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbf0_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pbf0_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pbf0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_9_proc0
// static void setup_mmap_write_pbf0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbf0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbf0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_pbf0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_2_proc0
// static void setup_mmap_write_pbf0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbf0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pbf0_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbf0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_pbf0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc0
// static void setup_mmap_write_pbf0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbf0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pbf0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbf0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbf0_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pbf0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pbf0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pbf0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbf0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbf0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pbe_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
static void setup_mmap_write_pbe_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pbe_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbe_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbe_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
static void setup_mmap_write_pbe_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pbe_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_0_proc0
// static void setup_mmap_write_pbe_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbe_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbe_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
static void setup_mmap_write_pbe_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_pbe_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pbe_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbe_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pbe_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pbe_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_2_common
static void setup_mmap_write_pbe_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pbe_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbe_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pbe_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pbe_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_1_common
// static void setup_mmap_write_pbe_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_8_proc0
// static void setup_mmap_write_pbe_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbe_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbe_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
static void setup_mmap_write_pbe_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pbe_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_2_proc0
// static void setup_mmap_write_pbe_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbe_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pbe_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pbe_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pbe_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_8_proc0
// static void setup_mmap_write_pbe_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbe_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbe_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pbe_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_5_common
// static void setup_mmap_write_pbe_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_3_proc0
// static void setup_mmap_write_pbe_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_pbe_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pbe_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbe_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbe_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pbe_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pbe_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pbe_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbe_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbe_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbd0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbd0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbd0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_60_common
// static void setup_mmap_write_pbd0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_pbd0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbd0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbd0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbd0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbd0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbd0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_pbd0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_pbd0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbd0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbd0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbd0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbd0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbd0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
static void setup_mmap_write_pbd0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pbd0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbd0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbd0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbd0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbd0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbd0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_60_common
static void setup_mmap_write_pbd0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pbd0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbd0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbd0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbc0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbc0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbc0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_59_common
// static void setup_mmap_write_pbc0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_pbc0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbc0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbc0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbc0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbc0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbc0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_6_common
// static void setup_mmap_write_pbc0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_pbc0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbc0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbc0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbc0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbc0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbc0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_44_common
// static void setup_mmap_write_pbc0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbd0_3_proc0
// static void setup_mmap_write_pbc0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbc0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pbc0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pbc0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pbc0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pbc0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_6_common
// static void setup_mmap_write_pbc0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbd0_2_proc0
// static void setup_mmap_write_pbc0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pbc0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pbc0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pb8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pb8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pb8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb8_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pb8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pb8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pb8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb78_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb78_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pb78_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_pb78_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_5_proc0
// static void setup_mmap_write_pb78_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pb78_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pb78_0_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb78_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb78_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pb78_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_9_common
// static void setup_mmap_write_pb78_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_5_proc0
// static void setup_mmap_write_pb78_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pb78_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pb78_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb78_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb78_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pb78_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_pb78_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc0
// static void setup_mmap_write_pb78_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pb78_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pb78_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb78_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb78_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pb78_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_9_common
// static void setup_mmap_write_pb78_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc0
// static void setup_mmap_write_pb78_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_pb78_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pb78_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb78_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb78_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pb78_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_pb78_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pb78_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pb78_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb78_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb78_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb78_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pb78_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_pb78_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pb78_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pb78_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pb78_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pb70_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb70_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb70_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb70_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_pb70_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_pb70_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pb70_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pb70_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_pb70_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_pb70_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pb70_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pb70_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_pb70_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_pb70_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pb70_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pb70_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_pb70_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_pb70_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_pb70_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pb70_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pb70_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb70_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb70_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pb70_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pb70_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb70_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb70_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb70_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb70_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb70_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb70_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pb70_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb70_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb70_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pb70_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pb6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_1_common
// static void setup_mmap_write_pb6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pb6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_2_common
// static void setup_mmap_write_pb6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
static void setup_mmap_write_pb6_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pb6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pb6_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_1_common
// static void setup_mmap_write_pb6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pb6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_2_common
// static void setup_mmap_write_pb6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_pb6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb6_2_proc1
// static void setup_mmap_write_pb6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_pb6_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_5_common
// static void setup_mmap_write_pb6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_pb6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb6_2_proc1
// static void setup_mmap_write_pb6_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pb6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pb6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb6_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb6_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb6_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb6_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_5_common
// static void setup_mmap_write_pb6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_pb6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb6_2_proc1
// static void setup_mmap_write_pb6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_pb6_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb50_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb50_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb50_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_56_common
// static void setup_mmap_write_pb50_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
static void setup_mmap_write_pb50_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pb50_0_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pb50_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb50_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb50_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb50_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_7_common
// static void setup_mmap_write_pb50_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
static void setup_mmap_write_pb50_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pb50_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb50_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb50_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb50_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb50_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_pb50_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
static void setup_mmap_write_pb50_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pb50_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pb50_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb50_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb50_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb50_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_60_common
// static void setup_mmap_write_pb50_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb50_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_pb50_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb50_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb40_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb40_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb40_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_56_common
// static void setup_mmap_write_pb40_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb40_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_2_proc1
// static void setup_mmap_write_pb40_0_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_pb40_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb40_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb40_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb40_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_44_common
// static void setup_mmap_write_pb40_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb40_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_pb40_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb40_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb40_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb40_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_pb40_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_pb40_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb40_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_pb40_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb40_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb40_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb40_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pb40_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_6_common
// static void setup_mmap_write_pb40_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb40_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_2_proc1
// static void setup_mmap_write_pb40_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pb40_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pb0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pb0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pb0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pb0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_pbf8_0_0
// static int test_mmap_write_pb0_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pb0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_pb0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pb0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pb0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pb0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_paf8_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
// static int test_mmap_write_paf8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_paf8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_paf8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_paf8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_paf8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_paf8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_paf8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_paf8_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_paf8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_paf8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_paf8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_paf8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_paf8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_paf0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_paf0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_paf0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_paf0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_8_proc0
// static void setup_mmap_write_paf0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_paf0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_paf0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_paf0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_paf0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_paf0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_paf0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_8_proc0
// static void setup_mmap_write_paf0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_paf0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_paf0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pae_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pae_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pae_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
static void setup_mmap_write_pae_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_pae_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pae_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pae_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pae_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pae_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pae_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_pae_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pae_0_proc0
// static void setup_mmap_write_pae_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_pae_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pae_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pad0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pad0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pad0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pad0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_pad0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pad0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pad0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pad0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pad0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pad0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
static void setup_mmap_write_pad0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pad0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pad0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pad0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pad0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pad0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pad0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_12_common
// static void setup_mmap_write_pad0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_proc0
// static void setup_mmap_write_pad0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pad0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pad0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pad0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pad0_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pad0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_36_common
static void setup_mmap_write_pad0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pad0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pad0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pad0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pac0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pac0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pac0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pac0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_pac0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pac0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pac0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pac0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pac0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pac0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_common
// static void setup_mmap_write_pac0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_proc0
// static void setup_mmap_write_pac0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pac0_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_pac0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pac0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pac0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_pac0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pac0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pac0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pac0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pac0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pac0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pac0_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pac0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pac0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pac0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pac0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pac0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_pa8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_pa8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pa8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pa8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pa8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa78_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa78_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pa78_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_pa78_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_pa78_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pa78_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pa78_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa78_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa78_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_pa78_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_pa78_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_pa78_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_pa78_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pa78_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa70_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa70_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa70_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_pa70_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_pa70_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pa70_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pa70_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa70_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa70_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa70_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_pa70_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_pa70_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_pa70_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pa70_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa6_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa6_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pa6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_pa6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_pa6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pa6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_pa6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa6_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa6_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pa6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_pa6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_pa6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_pa6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_pa6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa50_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa50_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa50_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_12_common
// static void setup_mmap_write_pa50_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
static void setup_mmap_write_pa50_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_pa50_0_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pa50_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa50_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa50_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa50_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pa50_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_pa50_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_pa50_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pa50_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa50_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa50_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa50_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_pa50_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_pa50_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pa50_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pa50_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa40_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa40_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa40_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
// static void setup_mmap_write_pa40_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pa40_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa50_0_proc1
// static void setup_mmap_write_pa40_0_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_pa40_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa40_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa40_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa40_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pa40_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pa40_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pa40_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pa40_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa40_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa40_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_pa40_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_pa40_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_pa40_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_pa40_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pa40_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_pa0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_write_paf8_0_0
// static int test_mmap_write_pa0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_pa0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_pa0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_pa0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_pa0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_pa0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p9f_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static int test_mmap_write_p9f_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p9f_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p9f_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc0
// static void setup_mmap_write_p9f_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p9f_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p9f_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p9e_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p9e_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p9e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p9e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_3_proc0
// static void setup_mmap_write_p9e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p9e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p9e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p9c_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p9c_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p9c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p9c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_1_proc0
// static void setup_mmap_write_p9c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p9c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p9c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p9a_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p9a_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p9a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_p9a_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p9a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p9a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p9a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p98_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p98_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p98_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p98_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p9a_0_proc0
// static void setup_mmap_write_p98_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p98_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p98_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p90_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p90_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p90_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p90_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p90_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p90_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p90_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p90_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p90_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p90_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p90_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p90_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p90_1_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p90_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p8f_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p8f_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p8f_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p8f_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p8f_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p8f_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p8f_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p8e_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p8e_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p8e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p8e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p8e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p8e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p8e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p8c_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p8c_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p8c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p8c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p8c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p8c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p8c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p8a_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p8a_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p8a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p8a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p8a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p8a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p8a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p88_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p88_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p88_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p88_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p88_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p88_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p88_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p80_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p9f_0_0
// static int test_mmap_write_p80_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p80_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p80_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p80_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p80_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p80_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p7f0_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p7f0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p7f0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p7f0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p7f0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7f0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7f0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7f0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7f0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p7f0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc0
// static void setup_mmap_write_p7f0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p7f0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7f0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7f0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7f0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p7f0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_p7f0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p7f0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7f0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7f0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7f0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
// static void setup_mmap_write_p7f0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc0
// static void setup_mmap_write_p7f0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_p7f0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p7f0_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p7f0_4_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p7f0_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p7f0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc0
// static void setup_mmap_write_p7f0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p7f0_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7f0_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7f0_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7f0_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p7f0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_p7f0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p7f0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7f0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7f0_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7f0_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
// static void setup_mmap_write_p7f0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc0
// static void setup_mmap_write_p7f0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_p7f0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p7f0_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7f0_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7f0_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
// static void setup_mmap_write_p7f0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_0_proc0
// static void setup_mmap_write_p7f0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_p7f0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p7f0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7f0_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7f0_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p7f0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p7f0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_4_proc0
// static void setup_mmap_write_p7f0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p7f0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7f0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7d0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_0_proc0
// static void setup_mmap_write_p7d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7d0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p7d0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc0
// static void setup_mmap_write_p7d0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p7d0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p7d0_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7d0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p7d0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_2_proc0
// static void setup_mmap_write_p7d0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p7d0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p7d0_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7d0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_3_proc0
// static void setup_mmap_write_p7d0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7d0_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_8_proc0
// static void setup_mmap_write_p7d0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7d0_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p7d0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_2_proc0
// static void setup_mmap_write_p7d0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p7d0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p7d0_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7d0_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_8_proc0
// static void setup_mmap_write_p7d0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7d0_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_3_proc0
// static void setup_mmap_write_p7d0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7d0_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_9_proc0
// static void setup_mmap_write_p7d0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7d0_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_0_proc0
// static void setup_mmap_write_p7d0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7d0_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p7d0_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc0
// static void setup_mmap_write_p7d0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p7d0_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p7d0_10_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7d0_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7d0_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p7d0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p7d0_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_9_proc0
// static void setup_mmap_write_p7d0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7d0_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7d0_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7a_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p7a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p7a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7a_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p7a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_1_proc0
// static void setup_mmap_write_p7a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7a_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p7a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_7_proc0
// static void setup_mmap_write_p7a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p7a_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p7a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_8_proc0
// static void setup_mmap_write_p7a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7a_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p7a_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p7a_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7a_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p7a_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_7_proc0
// static void setup_mmap_write_p7a_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7a_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p7a_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_1_proc0
// static void setup_mmap_write_p7a_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p7a_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p7a_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p7a_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p7a_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_8_proc0
// static void setup_mmap_write_p7a_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p7a_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p7a_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p76_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p76_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p76_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p76_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p76_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
// static void setup_mmap_write_p76_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_proc0
// static void setup_mmap_write_p76_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p76_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p76_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_4_common
static void setup_mmap_write_p76_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p76_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p76_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p76_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p76_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p9a_0_proc0
// static void setup_mmap_write_p76_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p76_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p76_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_4_common
// static void setup_mmap_write_p76_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p76_2_proc0
// static void setup_mmap_write_p76_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p76_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p76_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_p76_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p76_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p76_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p76_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_7_common
// static void setup_mmap_write_p76_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_p76_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p76_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p76_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p76_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_p76_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_p76_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p76_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p76_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p76_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_p76_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p76_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p76_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p76_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p76_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pac0_2_proc0
// static void setup_mmap_write_p76_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p76_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p76_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p76_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_7_common
// static void setup_mmap_write_p76_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_p76_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p76_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p76_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p76_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p76_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p76_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_p76_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_p76_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p76_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p76_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p72_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p72_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p72_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p72_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p72_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
// static void setup_mmap_write_p72_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_proc0
// static void setup_mmap_write_p72_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p72_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p72_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p72_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p9a_0_proc0
// static void setup_mmap_write_p72_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p72_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p72_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
static void setup_mmap_write_p72_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p72_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p72_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p72_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p72_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p9a_0_proc0
// static void setup_mmap_write_p72_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p72_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p72_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
// static void setup_mmap_write_p72_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_1_proc0
// static void setup_mmap_write_p72_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p72_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p72_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_59_common
// static void setup_mmap_write_p72_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_p72_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p72_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p72_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p72_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_p72_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_p72_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_p72_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p72_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_p72_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p72_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_p72_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p72_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p72_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p72_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_p72_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p72_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p72_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p72_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p72_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p72_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_44_common
// static void setup_mmap_write_p72_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_p72_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p72_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p72_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p72_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p72_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_p72_11_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_p72_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_p72_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p72_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p72_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p68_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p68_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p68_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p68_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p68_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p68_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p68_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p68_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p68_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p68_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p68_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p68_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p68_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p68_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p68_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p68_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p68_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p68_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p68_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p68_2_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p68_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p68_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p68_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p68_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p68_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p68_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p68_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p68_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5f0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p5f0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5f0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5f0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5f0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5f0_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p5f0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p5f0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p5f0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5f0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5f0_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p5f0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_p5f0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p5f0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5f0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5f0_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_p5f0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_5_proc0
// static void setup_mmap_write_p5f0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_p5f0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5f0_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5f0_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_p5f0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc0
// static void setup_mmap_write_p5f0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_p5f0_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5f0_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5f0_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p5f0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_p5f0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p5f0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5f0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5f0_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p5f0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p5f0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p5f0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5f0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5f0_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_p5f0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc0
// static void setup_mmap_write_p5f0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_p5f0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5f0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5f0_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
static void setup_mmap_write_p5f0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_p5f0_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_p5f0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5f0_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5f0_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5f0_9_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p5f0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p5f0_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p5f0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p5f0_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5f0_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5d0_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p5d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5d0_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p5d0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5d0_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p5d0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5d0_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p5d0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5d0_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p5d0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5d0_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p5d0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_p5d0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p5d0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5d0_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5d0_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5d0_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p5d0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_p5d0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p5d0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5d0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5d0_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p5d0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5d0_9_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p5d0_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_p5d0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p5d0_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5d0_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5d0_10_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p5d0_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p5d0_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5d0_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5d0_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5d0_11_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p5d0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p5d0_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_p5d0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p5d0_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p5d0_11_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p5a_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p5a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p5a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p5a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p5a_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5a_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p5a_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p5a_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p5a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p5a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p5a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p5a_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p5a_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p56_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p56_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p56_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p56_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p56_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p56_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p56_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p56_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p56_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p56_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p56_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p56_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p56_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p56_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p52_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p52_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p52_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p52_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p52_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p52_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p52_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p52_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p52_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p52_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p52_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p52_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p52_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p52_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p48_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_0_0
// static int test_mmap_write_p48_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p48_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p48_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p48_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p48_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p48_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p48_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p7f0_4_0
// static int test_mmap_write_p48_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p48_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p48_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p48_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p48_1_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p48_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p3f8_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static int test_mmap_write_p3f8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p3f8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
// static void setup_mmap_write_p3f8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_0_proc0
// static void setup_mmap_write_p3f8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_p3f8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p3f8_0_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f8_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p3f8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_1_common
// static void setup_mmap_write_p3f8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc0
// static void setup_mmap_write_p3f8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_p3f8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p3f8_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f8_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p3f8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_1_common
// static void setup_mmap_write_p3f8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_0_proc0
// static void setup_mmap_write_p3f8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_p3f8_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p3f8_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f8_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p3f8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_4_common
// static void setup_mmap_write_p3f8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc0
// static void setup_mmap_write_p3f8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_4_proc1
// static void setup_mmap_write_p3f8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p3f8_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f8_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p3f8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p3f8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_4_proc0
// static void setup_mmap_write_p3f8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p3f8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3f8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f8_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p3f8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p3f8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbf8_4_proc0
// static void setup_mmap_write_p3f8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p3f8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p3f8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f8_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p3f8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p3f8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p3f8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p3f8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3f8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p3f0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_0_proc0
// static void setup_mmap_write_p3f0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3f0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3f0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p3f0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_0_proc0
// static void setup_mmap_write_p3f0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3f0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p3f0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_p3f0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc0
// static void setup_mmap_write_p3f0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3f0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p3f0_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_p3f0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_2_proc0
// static void setup_mmap_write_p3f0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3f0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p3f0_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p3f0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_9_proc0
// static void setup_mmap_write_p3f0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3f0_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p3f0_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p3f0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc0
// static void setup_mmap_write_p3f0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3f0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p3f0_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p3f0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_9_proc0
// static void setup_mmap_write_p3f0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3f0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3f0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3f0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p3f0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_2_proc0
// static void setup_mmap_write_p3f0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3f0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p3f0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3f0_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3f0_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p3f0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p3f0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p3f0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3f0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3f0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p3e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_0_proc0
// static void setup_mmap_write_p3e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_5_common
// static void setup_mmap_write_p3e_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_2_proc0
// static void setup_mmap_write_p3e_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3e_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p3e_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_2_common
// static void setup_mmap_write_p3e_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_2_proc0
// static void setup_mmap_write_p3e_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3e_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p3e_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_5_common
// static void setup_mmap_write_p3e_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_3_proc0
// static void setup_mmap_write_p3e_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3e_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p3e_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_2_common
// static void setup_mmap_write_p3e_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_3_proc0
// static void setup_mmap_write_p3e_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_1_proc1
// static void setup_mmap_write_p3e_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p3e_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_1_common
// static void setup_mmap_write_p3e_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbe_0_proc0
// static void setup_mmap_write_p3e_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3e_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p3e_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p3e_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_8_proc0
// static void setup_mmap_write_p3e_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3e_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3e_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p3e_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_1_common
// static void setup_mmap_write_p3e_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_8_proc0
// static void setup_mmap_write_p3e_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3e_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p3e_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3e_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3e_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p3e_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p3e_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p3e_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3e_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3e_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3d0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3d0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_7_common
// static void setup_mmap_write_p3d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_p3d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3d0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3d0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3d0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3d0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3d0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_p3d0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_p3d0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3d0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p3d0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3d0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3d0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3d0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_7_common
// static void setup_mmap_write_p3d0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbd0_3_proc0
// static void setup_mmap_write_p3d0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3d0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3d0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3d0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3d0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3d0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_p3d0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbd0_2_proc0
// static void setup_mmap_write_p3d0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3d0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p3d0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3c0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3c0_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3c0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_59_common
// static void setup_mmap_write_p3c0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_7_proc0
// static void setup_mmap_write_p3c0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3c0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3c0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3c0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3c0_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3c0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_56_common
// static void setup_mmap_write_p3c0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf4_6_proc0
// static void setup_mmap_write_p3c0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3c0_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_p3c0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3c0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3c0_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3c0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_44_common
// static void setup_mmap_write_p3c0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pbd0_3_proc0
// static void setup_mmap_write_p3c0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3c0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p3c0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p3c0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p3c0_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p3c0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_30_common
static void setup_mmap_write_p3c0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_p3c0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p3c0_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_8_final
// static void setup_mmap_write_p3c0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p38_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p38_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p38_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p38_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p38_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p38_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p38_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p38_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p38_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p38_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p38_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p38_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p38_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p38_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p378_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p378_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p378_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_p378_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_5_proc0
// static void setup_mmap_write_p378_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_p378_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p378_0_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p378_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p378_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p378_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_4_common
// static void setup_mmap_write_p378_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc0
// static void setup_mmap_write_p378_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_p378_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p378_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p378_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p378_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p378_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pde_9_common
// static void setup_mmap_write_p378_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc0
// static void setup_mmap_write_p378_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_4_proc1
// static void setup_mmap_write_p378_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p378_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p378_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p378_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
static void setup_mmap_write_p378_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_p378_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_p378_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_write_p378_3_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(22);
  close(23);
  close(20);
  close(21);
}
static void setup_mmap_write_p378_3_procfinal(void) {
  close(22);
  close(23);
  close(20);
  close(21);
}

/*
 * calls: mmap write
 */
// static int test_mmap_write_p378_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p378_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p378_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p378_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p378_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p378_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p378_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p378_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p378_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p378_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_p378_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p378_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p378_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p378_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p370_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p370_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p370_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p370_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p370_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_p370_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p370_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p370_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_p370_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_p370_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p370_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p370_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_1_common
// static void setup_mmap_write_p370_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_p370_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p370_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p370_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_7_common
// static void setup_mmap_write_p370_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_p370_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc1
// static void setup_mmap_write_p370_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p370_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p370_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p370_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p370_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p370_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p370_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p370_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p370_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p370_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p370_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p370_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p370_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p370_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p370_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p370_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p370_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p36_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p36_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p36_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p36_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_5_common
// static void setup_mmap_write_p36_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_p36_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb6_2_proc1
// static void setup_mmap_write_p36_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p36_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_2_common
// static void setup_mmap_write_p36_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_7_proc0
// static void setup_mmap_write_p36_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb6_2_proc1
// static void setup_mmap_write_p36_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p36_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_5_common
// static void setup_mmap_write_p36_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_p36_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb6_2_proc1
// static void setup_mmap_write_p36_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_final
// static void setup_mmap_write_p36_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_2_common
// static void setup_mmap_write_p36_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_9_proc0
// static void setup_mmap_write_p36_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb6_2_proc1
// static void setup_mmap_write_p36_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pde_9_final
// static void setup_mmap_write_p36_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_write_pfe_4_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_1_common
// static void setup_mmap_write_p36_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p36_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p36_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p36_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p36_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p36_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p36_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p36_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p36_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p36_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p36_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbe_1_common
// static void setup_mmap_write_p36_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p36_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p36_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p36_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p350_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p350_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p350_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_p350_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p350_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_2_proc1
// static void setup_mmap_write_p350_0_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p350_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p350_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p350_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p350_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_6_common
// static void setup_mmap_write_p350_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p350_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_2_proc1
// static void setup_mmap_write_p350_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p350_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p350_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p350_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_p350_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_p350_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
static void setup_mmap_write_p350_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_p350_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p350_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p350_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p350_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p350_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_22_common
// static void setup_mmap_write_p350_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p350_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p350_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p350_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p340_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p340_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p340_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_6_common
// static void setup_mmap_write_p340_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p340_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_2_proc1
// static void setup_mmap_write_p340_0_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p340_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p340_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p340_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_p340_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_p340_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p340_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p340_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p340_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p340_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p340_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p340_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_44_common
// static void setup_mmap_write_p340_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p340_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p340_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p340_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p340_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p340_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p340_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_6_common
// static void setup_mmap_write_p340_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p340_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_2_proc1
// static void setup_mmap_write_p340_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p340_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p30_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p30_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p30_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p30_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p30_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p3f8_0_0
// static int test_mmap_write_p30_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p30_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p30_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p30_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p30_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p30_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2fc_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2fc_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p2fc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_p2fc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2fc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2fc_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2fc_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p2fc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_p2fc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2fc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2fc_2_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2fc_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p2fc_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_p2fc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2fc_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2fc_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2fc_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p2fc_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_3_proc0
// static void setup_mmap_write_p2fc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2fc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2fc_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2fc_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_p2fc_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_p2fc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2fc_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2fc_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2fc_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_p2fc_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p2fc_4_proc0
// static void setup_mmap_write_p2fc_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2fc_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2fc_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2fc_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p2fc_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p2fc_4_proc0
// static void setup_mmap_write_p2fc_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2fc_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2fc_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2fc_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p2fc_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_p2fc_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p2fc_4_proc0
// static void setup_mmap_write_p2fc_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p2fc_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2fc_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2f4_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2f4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p2f4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_8_proc0
// static void setup_mmap_write_p2f4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2f4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2f4_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2f4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p2f4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_8_proc0
// static void setup_mmap_write_p2f4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2f4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2f4_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2f4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p2f4_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_8_proc0
// static void setup_mmap_write_p2f4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2f4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2f4_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2f4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_44_common
static void setup_mmap_write_p2f4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_p2f4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2f4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2f4_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_p2f4_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_write_p2f4_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p2f4_3_proc0
// static void setup_mmap_write_p2f4_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2f4_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2f4_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2f4_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_44_common
// static void setup_mmap_write_p2f4_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p2f4_3_proc0
// static void setup_mmap_write_p2f4_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2f4_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2f4_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2f4_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_p2f4_4_common
// static void setup_mmap_write_p2f4_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p2f4_3_proc0
// static void setup_mmap_write_p2f4_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2f4_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2f4_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2f4_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_p2f4_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_write_p2f4_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_p2f4_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2f4_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2f4_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2e8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p2e8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pae_0_proc0
// static void setup_mmap_write_p2e8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2e8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2e8_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p2e8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pae_0_proc0
// static void setup_mmap_write_p2e8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2e8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2e8_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p2e8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_7_proc0
// static void setup_mmap_write_p2e8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2e8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2e8_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p2e8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_7_proc0
// static void setup_mmap_write_p2e8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2e8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2e8_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p2e8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pae_0_proc0
// static void setup_mmap_write_p2e8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2e8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2e8_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p2e8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pae_0_proc0
// static void setup_mmap_write_p2e8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2e8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2e8_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p2e8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_7_proc0
// static void setup_mmap_write_p2e8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p2e8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2e8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2e8_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2e8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p2e8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_7_proc0
// static void setup_mmap_write_p2e8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p2e8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p2e8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2d8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p2d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p2d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_1_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x5000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
// static void setup_mmap_write_p2d8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p72_3_proc0
// static void setup_mmap_write_p2d8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_2_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
static void setup_mmap_write_p2d8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2d8_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
static void setup_mmap_write_p2d8_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p2d8_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_4_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x6000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
static void setup_mmap_write_p2d8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x6000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_4_0
// static int test_mmap_write_p2d8_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_p2d8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_2_0
// static int test_mmap_write_p2d8_6_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_2_common
static void setup_mmap_write_p2d8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p2d8_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x6000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_4_0
// static int test_mmap_write_p2d8_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_18_common
static void setup_mmap_write_p2d8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_p2d8_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_8_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
static void setup_mmap_write_p2d8_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_mmap_write_p2d8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p2d8_6_proc0
// static void setup_mmap_write_p2d8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_p2d8_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_9_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x6000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
// static void setup_mmap_write_p2d8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 28672, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p2d8_5_proc0
// static void setup_mmap_write_p2d8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_10_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p2d8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_3_proc0
// static void setup_mmap_write_p2d8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_10_0
// static int test_mmap_write_p2d8_11_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2d8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p2d8_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p2d8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_12_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_12_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_p2d8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5070848, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2d8_13_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p2d8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p2d8_2_proc0
// static void setup_mmap_write_p2d8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_14_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2d8_14_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2d8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p2d8_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p2d8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_15_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_2_0
// static int test_mmap_write_p2d8_15_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2d8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p2d8_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p2d8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2d8_16_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_12_0
// static int test_mmap_write_p2d8_16_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2d8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p2d8_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p2d8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2d8_17_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x7000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2d8_17_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2d8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
static void setup_mmap_write_p2d8_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2d8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2d8_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2d8_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2c8_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p2c8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p2c8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_10_0
// static int test_mmap_write_p2c8_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p2c8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p2c8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x5000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_1_0
// static int test_mmap_write_p2c8_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_21_common
static void setup_mmap_write_p2c8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2c8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p2c8_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2c8_3_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x3000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2c8_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_p2c8_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2c8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2c8_4_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p2c8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p72_9_proc0
// static void setup_mmap_write_p2c8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_10_0
// static int test_mmap_write_p2c8_5_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_2_common
static void setup_mmap_write_p2c8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2c8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p2c8_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2c8_6_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x4000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2c8_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2c8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_27_common
// static void setup_mmap_write_p2c8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pad0_3_proc0
// static void setup_mmap_write_p2c8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2c8_6_0
// static int test_mmap_write_p2c8_7_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
static void setup_mmap_write_p2c8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2c8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x3000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2c8_3_0
// static int test_mmap_write_p2c8_8_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_27_common
static void setup_mmap_write_p2c8_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2c8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2c8_9_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2c8_9_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_21_common
// static void setup_mmap_write_p2c8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 16384, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p2c8_2_proc0
// static void setup_mmap_write_p2c8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p2c8_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2c8_10_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p2c8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p2d8_2_proc0
// static void setup_mmap_write_p2c8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2c8_11_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_46_common
static void setup_mmap_write_p2c8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2c8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p2c8_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p2c8_12_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x3000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p2c8_12_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_p2c8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p2c8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_12_0
// static int test_mmap_write_p2c8_13_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p2c8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p2c8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_14_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_2_0
// static int test_mmap_write_p2c8_14_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2c8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_36_common
// static void setup_mmap_write_p2c8_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p2c8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_15_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_8_0
// static int test_mmap_write_p2c8_15_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2c8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
// static void setup_mmap_write_p2c8_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p2c8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_16_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2c8_16_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p2c8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p2c8_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_proc0
// static void setup_mmap_write_p2c8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2c8_17_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_8_0
// static int test_mmap_write_p2c8_17_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p2c8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_36_common
// static void setup_mmap_write_p2c8_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p2c8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2c8_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2c8_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2a_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p2a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p2a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2a_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2a_1_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p2a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p2a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2a_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2a_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p2a_2_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p2a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p2a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2a_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p2a_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p2a_3_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p2a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p2a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p2a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p2a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p2a_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p27c_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p27c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_p27c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p27c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p27c_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_p27c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_p27c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p27c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p27c_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p27c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_p27c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p27c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p27c_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_p27c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_3_proc0
// static void setup_mmap_write_p27c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p27c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p27c_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
static void setup_mmap_write_p27c_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_write_p27c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p27c_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p27c_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_p27c_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p27c_4_proc0
// static void setup_mmap_write_p27c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p27c_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p27c_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p27c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p27c_4_proc0
// static void setup_mmap_write_p27c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p27c_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p27c_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p27c_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p27c_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_28_common
// static void setup_mmap_write_p27c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_p27c_4_proc0
// static void setup_mmap_write_p27c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p27c_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p27c_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p274_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p274_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p274_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p274_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p274_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p274_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p274_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p274_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p274_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p274_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p274_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p274_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p274_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pdc_5_common
// static void setup_mmap_write_p274_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p274_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p274_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p274_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_44_common
// static void setup_mmap_write_p274_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p274_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p274_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p274_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_p2f4_4_common
// static void setup_mmap_write_p274_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p274_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p274_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p274_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf0_44_common
// static void setup_mmap_write_p274_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p274_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p274_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p274_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p274_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p274_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_p2f4_4_common
// static void setup_mmap_write_p274_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p274_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p274_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p274_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p268_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p268_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p268_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p268_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p268_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p268_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p268_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p268_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p268_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p268_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p268_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p268_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p268_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p268_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p268_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p268_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p268_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pbf8_5_common
// static void setup_mmap_write_p268_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p268_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pf4_6_final
// static void setup_mmap_write_p268_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p268_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p268_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p268_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p268_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p268_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p268_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pdc_1_proc0
// static void setup_mmap_write_p268_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p268_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p268_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p268_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p268_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p268_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pb50_1_proc1
// static void setup_mmap_write_p268_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p268_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p268_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p258_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
static void setup_mmap_write_p258_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_mmap_write_p258_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p258_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_10_0
// static int test_mmap_write_p258_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_12_common
// static void setup_mmap_write_p258_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p258_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa50_0_proc1
// static void setup_mmap_write_p258_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p258_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2c8_9_0
// static int test_mmap_write_p258_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
// static void setup_mmap_write_p258_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pad0_3_proc0
// static void setup_mmap_write_p258_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_3_proc1
// static void setup_mmap_write_p258_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p258_3_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x5000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p258_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
// static void setup_mmap_write_p258_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_3_proc1
// static void setup_mmap_write_p258_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_3_proc1
// static void setup_mmap_write_p258_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_12_0
// static int test_mmap_write_p258_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_p258_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_mmap_write_p258_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pad0_3_proc0
static void setup_mmap_write_p258_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p258_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_2_final
// static void setup_mmap_write_p258_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x3000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2c8_3_0
// static int test_mmap_write_p258_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_p258_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_mmap_write_p258_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pad0_3_proc0
static void setup_mmap_write_p258_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p258_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p258_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x3000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2c8_3_0
// static int test_mmap_write_p258_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p258_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p258_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p258_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_12_0
// static int test_mmap_write_p258_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_46_common
// static void setup_mmap_write_p258_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p258_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p258_4_proc1
// static void setup_mmap_write_p258_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p258_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p258_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
static void setup_mmap_write_p258_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5066752, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p258_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p258_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x5000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_1_0
// static int test_mmap_write_p258_9_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_27_common
// static void setup_mmap_write_p258_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p258_0_proc1
static void setup_mmap_write_p258_9_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p258_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x6000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_9_0
// static int test_mmap_write_p258_10_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
// static void setup_mmap_write_p258_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_3_proc1
// static void setup_mmap_write_p258_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_3_proc1
// static void setup_mmap_write_p258_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2c8_9_0
// static int test_mmap_write_p258_11_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf0_27_common
// static void setup_mmap_write_p258_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pad0_3_proc0
// static void setup_mmap_write_p258_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 16384, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p258_9_proc1
// static void setup_mmap_write_p258_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_12_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x6000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_4_0
// static int test_mmap_write_p258_12_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
// static void setup_mmap_write_p258_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_3_proc1
// static void setup_mmap_write_p258_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 28672, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p2d8_17_proc0
// static void setup_mmap_write_p258_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p258_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_8_0
// static int test_mmap_write_p258_13_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p258_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p258_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p258_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p258_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p258_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p248_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1c1000UL);
  
  return xerrno(r);
}
// static int test_mmap_write_p248_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p248_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p248_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p248_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_2_0
// static int test_mmap_write_p248_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p248_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p248_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_10_0
// static int test_mmap_write_p248_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p248_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p248_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_10_0
// static int test_mmap_write_p248_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_5_common
// static void setup_mmap_write_p248_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p248_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa50_0_proc1
// static void setup_mmap_write_p248_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p248_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p248_4_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_61_common
// static void setup_mmap_write_p248_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_10_0
// static int test_mmap_write_p248_5_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_p258_5_common
// static void setup_mmap_write_p248_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa50_0_proc1
// static void setup_mmap_write_p248_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p248_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x6000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_9_0
// static int test_mmap_write_p248_6_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_3_common
// static void setup_mmap_write_p248_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p258_0_proc1
// static void setup_mmap_write_p248_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_3_proc1
// static void setup_mmap_write_p248_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p248_7_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_36_common
// static void setup_mmap_write_p248_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p248_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_12_0
// static int test_mmap_write_p248_8_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
static void setup_mmap_write_p248_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 34271232, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p248_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x5000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p258_3_0
// static int test_mmap_write_p248_9_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
static void setup_mmap_write_p248_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_write_p248_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36294656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_mmap_write_p248_9_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_write_p248_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p248_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2d8_2_0
// static int test_mmap_write_p248_10_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_36_common
// static void setup_mmap_write_p248_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p248_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p248_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p248_11_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p248_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p248_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_5_proc1
// static void setup_mmap_write_p248_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_12_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x3000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2c8_12_0
// static int test_mmap_write_p248_12_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pd0_2_common
// static void setup_mmap_write_p248_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pad0_3_proc0
// static void setup_mmap_write_p248_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p258_4_proc1
// static void setup_mmap_write_p248_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_write_pf4_4_final
// static void setup_mmap_write_p248_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p248_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x5000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p258_3_0
// static int test_mmap_write_p248_13_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p248_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_1_common
// static void setup_mmap_write_p248_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p258_0_proc1
// static void setup_mmap_write_p248_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p258_0_proc1
// static void setup_mmap_write_p248_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p248_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p22_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p22_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p22_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p22_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p22_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p22_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p22_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p22_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p22_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p22_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p22_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pa8_0_proc0
// static void setup_mmap_write_p22_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p22_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p22_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p22_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_0_0
// static int test_mmap_write_p22_2_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p22_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p22_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p22_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p22_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p22_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p22_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_write_p2fc_2_0
// static int test_mmap_write_p22_3_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p22_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_15_common
// static void setup_mmap_write_p22_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p22_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p22_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p22_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
static int test_mmap_write_p1f_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static int test_mmap_write_p1f_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_1_1
// static void setup_mmap_write_p1f_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfe_0_common
// static void setup_mmap_write_p1f_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc0
// static void setup_mmap_write_p1f_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p1f_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p1f_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p1e_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p1e_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p1e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p1e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfc_3_proc0
// static void setup_mmap_write_p1e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p1e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p1e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p1c_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p1c_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p1c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p1c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_1_proc0
// static void setup_mmap_write_p1c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p1c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p1c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p1a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p1a_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p1a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p1a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p9a_0_proc0
// static void setup_mmap_write_p1a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p1a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p1a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p18_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p18_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfc_0_1
// static void setup_mmap_write_p18_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p18_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_p9a_0_proc0
// static void setup_mmap_write_p18_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p18_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p18_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p10_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p10_0_1(void) {
//   ssize_t r = write(11, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_1_1
// static void setup_mmap_write_p10_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p10_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p10_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p10_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p10_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p10_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p10_1_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p10_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p10_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p10_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p10_1_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p10_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p0f_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p0f_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(32);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pfe_0_1
// static void setup_mmap_write_p0f_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf4_31_common
// static void setup_mmap_write_p0f_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_1_proc1
// static void setup_mmap_write_p0f_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pde_1_proc1
// static void setup_mmap_write_p0f_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p0f_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p0e_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p0e_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p0e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pfc_0_common
// static void setup_mmap_write_p0e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p0e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc0
// static void setup_mmap_write_p0e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p0e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p0c_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p0c_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p0c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_write_pf8_0_common
// static void setup_mmap_write_p0c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pfe_0_proc1
// static void setup_mmap_write_p0c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_write_pf8_0_proc0
// static void setup_mmap_write_p0c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_final
// static void setup_mmap_write_p0c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_write_pfe_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p0a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p0a_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p0a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_0_common
// static void setup_mmap_write_p0a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p0a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p0a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p0a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p08_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p08_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, 4096);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pdc_0_1
// static void setup_mmap_write_p08_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_write_pf4_37_common
// static void setup_mmap_write_p08_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p08_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_write_pe0_1_proc0
// static void setup_mmap_write_p08_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_write_pf4_0_final
// static void setup_mmap_write_p08_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

/*
 * calls: mmap write
 */
// static int test_mmap_write_p00_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_write_p1f_0_0
// static int test_mmap_write_p00_0_1(void) {
//   ssize_t r = write(10, dataval0, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r <= 0) return xerrno(r);
//   return r;
// }
// ^ See test_mmap_write_pf8_0_1
// static void setup_mmap_write_p00_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_write_pe0_0_common
// static void setup_mmap_write_p00_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p00_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_write_pf4_0_proc1
// static void setup_mmap_write_p00_0_final(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal
// static void setup_mmap_write_p00_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_write_pf4_0_procfinal

//+++ common
static void cleanup(void) {
  unlink("__f0");
  unlink("__f1");
  unlink("__f2");
  unlink("__f3");
  unlink("__f4");
  unlink("__f5");
}

struct fstest fstests[] = {
//+++ tests
  { "fs-mmap_write_pfe_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_1",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_1_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_2",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_2_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_3",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_4",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_4_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_5",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_5_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_6",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_6_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_7",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_7_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_8",
    &setup_mmap_write_pfe_8_common,
    { { &setup_mmap_write_pfe_8_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_9",
    &setup_mmap_write_pfe_9_common,
    { { &setup_mmap_write_pfe_9_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_10",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_10_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_11",
    &setup_mmap_write_pfe_8_common,
    { { &setup_mmap_write_pfe_11_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_12",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_12_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_13",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_13_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_14",
    &setup_mmap_write_pfe_8_common,
    { { &setup_mmap_write_pfe_14_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_15",
    &setup_mmap_write_pfe_9_common,
    { { &setup_mmap_write_pfe_15_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_16",
    &setup_mmap_write_pfe_8_common,
    { { &setup_mmap_write_pfe_16_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_17",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_17_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_18",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_18_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_19",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_19_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_20",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_20_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_21",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_21_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_22",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_22_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_23",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_23_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_24",
    &setup_mmap_write_pfe_9_common,
    { { &setup_mmap_write_pfe_24_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_25",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_25_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_26",
    &setup_mmap_write_pfe_8_common,
    { { &setup_mmap_write_pfe_26_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_27",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_27_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_28",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_28_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_29",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_29_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfe_30",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_30_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_1",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_1_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_2",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_3",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_4",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_4_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_5",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_5_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_6",
    &setup_mmap_write_pfc_6_common,
    { { &setup_mmap_write_pfc_6_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_7",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfc_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_8",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_9",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_10",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_10_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_11",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_11_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_12",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfc_12_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_13",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_13_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_14",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_14_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_15",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfc_15_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_16",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfc_16_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_17",
    &setup_mmap_write_pfc_6_common,
    { { &setup_mmap_write_pfc_17_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_18",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfc_18_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_19",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_19_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_20",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_20_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_21",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_21_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_22",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_22_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_23",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_23_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_24",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_20_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_25",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_25_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_26",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_26_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_27",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_27_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_28",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_27_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_29",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_29_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_30",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_30_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_31",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfc_31_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_32",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfe_26_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_33",
    &setup_mmap_write_pfc_6_common,
    { { &setup_mmap_write_pfc_33_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_34",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pfc_34_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_35",
    &setup_mmap_write_pfc_6_common,
    { { &setup_mmap_write_pfc_35_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_36",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_36_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_37",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_37_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_38",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_38_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_39",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_39_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_40",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_40_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pfc_41",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_41_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_1_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_2",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_2_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_3",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_4",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_4_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_5",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_5_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_6",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_7",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_8",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_9",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_10",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_10_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_11",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_11_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_12",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_12_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_13",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_13_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_14",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_14_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_15",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_15_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_16",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_16_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_17",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_17_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_18",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_18_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_19",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_19_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_20",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_20_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_21",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pf8_21_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_22",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_22_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_23",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_23_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_24",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_24_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_25",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_25_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf8_26",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_26_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_1",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_2",
    &setup_mmap_write_pf4_2_common,
    { { &setup_mmap_write_pf4_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_3",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_pf4_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_4",
    &setup_mmap_write_pf4_4_common,
    { { &setup_mmap_write_pf4_4_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_5",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf4_5_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_6",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_7",
    &setup_mmap_write_pf4_7_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_8",
    &setup_mmap_write_pf4_8_common,
    { { &setup_mmap_write_pf4_8_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_9",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_9_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_10",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_10_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_11",
    &setup_mmap_write_pf4_11_common,
    { { &setup_mmap_write_pf4_11_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_12",
    &setup_mmap_write_pf4_12_common,
    { { &setup_mmap_write_pf4_12_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_13",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_13_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_14",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_14_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_15",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf4_15_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_16",
    &setup_mmap_write_pf4_4_common,
    { { &setup_mmap_write_pf4_16_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_17",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf4_17_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_18",
    &setup_mmap_write_pf4_18_common,
    { { &setup_mmap_write_pf4_18_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_19",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_19_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_20",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_20_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_21",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_pf4_21_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_22",
    &setup_mmap_write_pf4_22_common,
    { { &setup_mmap_write_pf4_22_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_23",
    &setup_mmap_write_pf4_23_common,
    { { &setup_mmap_write_pf4_23_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_24",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_24_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_25",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf4_25_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_26",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_pf4_26_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_27",
    &setup_mmap_write_pf4_27_common,
    { { &setup_mmap_write_pf4_27_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_28",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pf4_28_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_29",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_pf4_29_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_30",
    &setup_mmap_write_pf4_30_common,
    { { &setup_mmap_write_pf4_30_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_30_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_31",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pf4_31_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_32",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf4_32_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_33",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pf4_33_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_34",
    &setup_mmap_write_pf4_34_common,
    { { &setup_mmap_write_pf4_34_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_35",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_35_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_36",
    &setup_mmap_write_pf4_36_common,
    { { &setup_mmap_write_pf4_36_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_37",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_37_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_38",
    &setup_mmap_write_pf4_4_common,
    { { &setup_mmap_write_pf4_38_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_39",
    &setup_mmap_write_pf4_18_common,
    { { &setup_mmap_write_pf4_39_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_40",
    &setup_mmap_write_pf4_12_common,
    { { &setup_mmap_write_pf4_40_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_41",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_41_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_42",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf4_42_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_43",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_43_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_44",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pf4_44_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_45",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pf4_45_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_46",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf4_46_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_47",
    &setup_mmap_write_pf4_47_common,
    { { &setup_mmap_write_pf4_47_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_47_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_48",
    &setup_mmap_write_pf4_27_common,
    { { &setup_mmap_write_pf4_48_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_49",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf4_49_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_50",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf4_50_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_51",
    &setup_mmap_write_pf4_12_common,
    { { &setup_mmap_write_pf4_51_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_52",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_52_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_53",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_53_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_54",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_54_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_55",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf4_55_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_56",
    &setup_mmap_write_pf4_56_common,
    { { &setup_mmap_write_pf4_56_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_57",
    &setup_mmap_write_pf4_57_common,
    { { &setup_mmap_write_pf4_57_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_57_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_58",
    &setup_mmap_write_pf4_58_common,
    { { &setup_mmap_write_pf4_58_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_59",
    &setup_mmap_write_pf4_59_common,
    { { &setup_mmap_write_pf4_59_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_60",
    &setup_mmap_write_pf4_60_common,
    { { &setup_mmap_write_pf4_60_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf4_61",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pf4_61_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_1",
    &setup_mmap_write_pf0_1_common,
    { { &setup_mmap_write_pf0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_2",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf0_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_3",
    &setup_mmap_write_pf4_36_common,
    { { &setup_mmap_write_pf0_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_4",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf0_4_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_5",
    &setup_mmap_write_pf0_5_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_6",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_7",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_7_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_8",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf0_8_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_9",
    &setup_mmap_write_pf4_11_common,
    { { &setup_mmap_write_pf0_9_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_10",
    &setup_mmap_write_pf0_10_common,
    { { &setup_mmap_write_pf0_10_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_47_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_11",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_11_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_12",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_12_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_13",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_13_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_14",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf4_12_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_15",
    &setup_mmap_write_pf0_1_common,
    { { &setup_mmap_write_pf0_15_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_16",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_16_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_17",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf0_17_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_18",
    &setup_mmap_write_pf0_18_common,
    { { &setup_mmap_write_pf0_18_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_19",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pf0_19_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_20",
    &setup_mmap_write_pf4_4_common,
    { { &setup_mmap_write_pf0_20_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_21",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pf0_21_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_22",
    &setup_mmap_write_pf0_22_common,
    { { &setup_mmap_write_pf0_22_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf0_22_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_23",
    &setup_mmap_write_pf0_1_common,
    { { &setup_mmap_write_pf4_27_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_24",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf0_24_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_25",
    &setup_mmap_write_pf4_2_common,
    { { &setup_mmap_write_pf4_29_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_26",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_pf0_26_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_27",
    &setup_mmap_write_pf0_27_common,
    { { &setup_mmap_write_pf0_27_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_28",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pf0_28_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_29",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pf0_29_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_30",
    &setup_mmap_write_pf0_30_common,
    { { &setup_mmap_write_pf0_30_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_31",
    &setup_mmap_write_pf0_30_common,
    { { &setup_mmap_write_pf0_31_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_32",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pf0_32_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_33",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pf0_33_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_34",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_pf0_34_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_35",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_pf0_35_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_36",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pf0_36_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_37",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pf0_37_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_38",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_pf0_38_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_39",
    &setup_mmap_write_pf0_39_common,
    { { &setup_mmap_write_pf0_39_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_47_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_40",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pf0_40_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_41",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pf0_41_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_42",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pf0_42_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_43",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pf0_43_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_44",
    &setup_mmap_write_pf0_44_common,
    { { &setup_mmap_write_pf0_44_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_45",
    &setup_mmap_write_pf0_1_common,
    { { &setup_mmap_write_pf0_45_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_46",
    &setup_mmap_write_pf0_46_common,
    { { &setup_mmap_write_pf0_46_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_47",
    &setup_mmap_write_pf0_1_common,
    { { &setup_mmap_write_pf0_47_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_48",
    &setup_mmap_write_pf4_4_common,
    { { &setup_mmap_write_pf0_48_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_49",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_49_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_50",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf0_50_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_51",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf0_51_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_52",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pf0_52_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_53",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_53_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_54",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pf0_54_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_55",
    &setup_mmap_write_pf0_55_common,
    { { &setup_mmap_write_pf0_55_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_30_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_56",
    &setup_mmap_write_pf0_56_common,
    { { &setup_mmap_write_pf0_56_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_57",
    &setup_mmap_write_pf0_57_common,
    { { &setup_mmap_write_pf0_57_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_58",
    &setup_mmap_write_pf0_58_common,
    { { &setup_mmap_write_pf0_58_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_59",
    &setup_mmap_write_pf0_59_common,
    { { &setup_mmap_write_pf4_60_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_60",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf0_60_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pf0_61",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pf4_42_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_1",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_2",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pe0_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_3",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_4",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pe0_4_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_5",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_5_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_6",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_6_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_7",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_7_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_8",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_8_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pe0_9",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_9_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_1",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pfe_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_2",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pde_2_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_3",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_4",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_4_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_5",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_5_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_6",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_6_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_7",
    &setup_mmap_write_pf0_30_common,
    { { &setup_mmap_write_pde_7_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_8",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_6_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_9",
    &setup_mmap_write_pde_9_common,
    { { &setup_mmap_write_pde_9_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_10",
    &setup_mmap_write_pde_9_common,
    { { &setup_mmap_write_pde_10_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_11",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_11_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_12",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_12_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_13",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_13_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_14",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_14_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_15",
    &setup_mmap_write_pf0_30_common,
    { { &setup_mmap_write_pde_15_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_16",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_16_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_17",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_9_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_18",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_10_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_19",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_11_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_20",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_20_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_21",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_20_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_22",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_22_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_23",
    &setup_mmap_write_pde_9_common,
    { { &setup_mmap_write_pde_22_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_24",
    &setup_mmap_write_pde_9_common,
    { { &setup_mmap_write_pde_24_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_25",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_25_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_26",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_24_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_27",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_25_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_28",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_28_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_29",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_29_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_30",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_30_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_31",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_31_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_32",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_32_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_33",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_33_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pde_34",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_34_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_1",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_2",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_2_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_3",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_3_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_4",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pdc_4_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_5",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_5_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_6",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_7",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_8",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_9",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_10",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_10_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_11",
    &setup_mmap_write_pfc_7_common,
    { { &setup_mmap_write_pdc_11_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_12",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_12_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_13",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pf8_2_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_14",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_14_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_15",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_14_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_16",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_16_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_17",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_17_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_18",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_5_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_19",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_16_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_20",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_20_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_21",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_21_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_22",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_22_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_23",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_5_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_24",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_24_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_25",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_24_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_26",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfe_5_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_27",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_22_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_28",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_28_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_29",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_29_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_30",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_28_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_31",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_31_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_32",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_32_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_33",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_33_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_34",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_32_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_35",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_33_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_36",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_29_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_37",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pde_2_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_38",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_38_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_39",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_39_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_40",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_40_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pdc_41",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_41_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd8_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd8_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pdc_2_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd8_2",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pd8_2_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd8_3",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pd8_3_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd8_4",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pdc_12_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd8_5",
    &setup_mmap_write_pf8_5_common,
    { { &setup_mmap_write_pd8_5_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd8_6",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pd8_6_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_1",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_2_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_2",
    &setup_mmap_write_pf4_27_common,
    { { &setup_mmap_write_pd4_2_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_3",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pd4_3_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_4",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pd4_4_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_5",
    &setup_mmap_write_pf4_27_common,
    { { &setup_mmap_write_pd4_5_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_6",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_3_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_7",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_5_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd4_8",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_4_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_1",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pe0_2_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_2",
    &setup_mmap_write_pd0_2_common,
    { { &setup_mmap_write_pd0_2_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_3",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_pd4_3_proc0 }, { &setup_mmap_write_pd0_3_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_4",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pe0_4_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_5",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pd0_5_proc0 }, { &setup_mmap_write_pd0_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_6",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pd4_5_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_7",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pd0_7_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pd0_8",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pe0_5_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pc0_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pc0_1",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pe0_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pc0_2",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pc0_3",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pe0_4_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pc0_4",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_5_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_pfe_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf8_0",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pbf8_0_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf8_1",
    &setup_mmap_write_pbf8_1_common,
    { { &setup_mmap_write_pbf8_0_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf8_2",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_4_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf8_3",
    &setup_mmap_write_pbf8_1_common,
    { { &setup_mmap_write_pfe_4_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf8_4",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pbf8_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf8_5",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pbf8_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf8_6",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pde_1_proc1 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_1",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfc_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_2",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pfc_1_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_3",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfc_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_4",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pfc_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_5",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_6",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_7",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_1_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbf0_8",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pbe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_1",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pbe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_2",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pbe_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_3",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pbe_3_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_4",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pf8_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_5",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pbe_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_6",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_7",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pbe_3_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbe_8",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbd0_0",
    &setup_mmap_write_pf4_60_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbd0_1",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbd0_2",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pbd0_2_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbd0_3",
    &setup_mmap_write_pf4_60_common,
    { { &setup_mmap_write_pbd0_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbc0_0",
    &setup_mmap_write_pf0_59_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbc0_1",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbc0_2",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pbd0_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pbc0_3",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pbd0_2_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pb8_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pb8_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pb78_0",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_5_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb78_1",
    &setup_mmap_write_pde_9_common,
    { { &setup_mmap_write_pde_5_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb78_2",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_4_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb78_3",
    &setup_mmap_write_pde_9_common,
    { { &setup_mmap_write_pde_4_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb78_4",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb78_5",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_1",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_2",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_3",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_4",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_5",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_6",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb70_7",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_1",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_2",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_3",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_4",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_5",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_6",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb6_7",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb50_0",
    &setup_mmap_write_pf0_56_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pb50_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb50_1",
    &setup_mmap_write_pf4_7_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pb50_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb50_2",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pb50_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb50_3",
    &setup_mmap_write_pf4_60_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pb50_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb40_0",
    &setup_mmap_write_pf0_56_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pb50_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb40_1",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pb50_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb40_2",
    &setup_mmap_write_pb40_2_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pb50_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb40_3",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pb50_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb0_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pb0_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_pbf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_paf8_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_paf8_1",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_paf0_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_paf0_1",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pae_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pae_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pae_1",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pae_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pad0_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pad0_1",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_pad0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pad0_2",
    &setup_mmap_write_pf4_12_common,
    { { &setup_mmap_write_pf0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pad0_3",
    &setup_mmap_write_pf4_36_common,
    { { &setup_mmap_write_pad0_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pac0_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pac0_1",
    &setup_mmap_write_pf0_1_common,
    { { &setup_mmap_write_pf0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pac0_2",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pac0_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pac0_3",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pa8_0",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_pa78_0",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa78_1",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa70_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa70_1",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa6_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa6_1",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa50_0",
    &setup_mmap_write_pf4_12_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pa50_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa50_1",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pd0_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa50_2",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa40_0",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pa50_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa40_1",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa40_2",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_pa0_0",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_paf8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p9f_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_1_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p9e_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p9c_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_1_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p9a_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_p9a_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p98_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p9a_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p90_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p90_1",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p8f_0",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pfe_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p8e_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p8c_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p8a_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p88_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p80_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p9f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_1",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_1_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_2",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_3",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_4_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_4",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_1_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_5",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_6",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_4_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_7",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pbf8_0_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7f0_8",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pbf8_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_1",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_1_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_2",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_3",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_4",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_5",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_6",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_7",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_8",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_9",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_10",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_1_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7d0_11",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_1_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_2",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_3",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_4",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_5",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_6",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_1_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p7a_7",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_1",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pf4_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_2",
    &setup_mmap_write_pf4_4_common,
    { { &setup_mmap_write_p76_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_3",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_p9a_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_4",
    &setup_mmap_write_pf4_4_common,
    { { &setup_mmap_write_p76_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_5",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_p76_5_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_6",
    &setup_mmap_write_pf4_7_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_7",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_8",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_p76_8_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_9",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pac0_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_10",
    &setup_mmap_write_pf4_7_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p76_11",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_1",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_2",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p9a_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_3",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_p72_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_4",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p9a_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_5",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pf0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_6",
    &setup_mmap_write_pf0_59_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_7",
    &setup_mmap_write_p72_7_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_8",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_p72_8_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_9",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p72_9_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_10",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p72_11",
    &setup_mmap_write_p72_11_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p68_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p68_1",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p68_2",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p68_3",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_1",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pfe_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_2",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_3",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_5_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_4",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_4_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_5",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_6",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pfe_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_7",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_4_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_8",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_p5f0_8_proc0 }, { &setup_mmap_write_p5f0_8_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5f0_9",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_1",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_2",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_3",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_4",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_5",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_6",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_7",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_8",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_9",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_10",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5d0_11",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5a_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p5a_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p56_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p56_1",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p52_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p52_1",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p48_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p7f0_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p48_1",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p7f0_4_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f8_0",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pbf8_0_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f8_1",
    &setup_mmap_write_pbf8_1_common,
    { { &setup_mmap_write_pfe_4_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f8_2",
    &setup_mmap_write_pbf8_1_common,
    { { &setup_mmap_write_pbf8_0_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f8_3",
    &setup_mmap_write_pfe_4_common,
    { { &setup_mmap_write_pfe_4_proc0 }, { &setup_mmap_write_pfe_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f8_4",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pbf8_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f8_5",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pbf8_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f8_6",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pde_1_proc1 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_1",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfc_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_2",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pfc_1_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_3",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pfc_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_4",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfc_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_5",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_1_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_6",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_9_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_7",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pfc_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3f0_8",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pbe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_1",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pbe_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_2",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pbe_2_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_3",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pbe_3_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_4",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pbe_3_proc0 }, { &setup_mmap_write_pfc_1_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_5",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pbe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_6",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_7",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pf8_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3e_8",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3d0_0",
    &setup_mmap_write_pf4_7_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3d0_1",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3d0_2",
    &setup_mmap_write_pf4_7_common,
    { { &setup_mmap_write_pbd0_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3d0_3",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pbd0_2_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3c0_0",
    &setup_mmap_write_pf0_59_common,
    { { &setup_mmap_write_pf4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3c0_1",
    &setup_mmap_write_pf0_56_common,
    { { &setup_mmap_write_pf4_6_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3c0_2",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pbd0_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p3c0_3",
    &setup_mmap_write_pf0_30_common,
    { { &setup_mmap_write_p3c0_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_8_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p38_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p38_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p378_0",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_5_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p378_1",
    &setup_mmap_write_pde_4_common,
    { { &setup_mmap_write_pde_4_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p378_2",
    &setup_mmap_write_pde_9_common,
    { { &setup_mmap_write_pde_4_proc0 }, { &setup_mmap_write_pde_4_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p378_3",
    &setup_mmap_write_p378_3_common,
    { { &setup_mmap_write_p378_3_proc0 }, { &setup_mmap_write_p378_3_proc1 } },
    &setup_mmap_write_p378_3_procfinal,
    &setup_mmap_write_p378_3_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p378_4",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p378_5",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_1",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_2",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_3",
    &setup_mmap_write_pfc_1_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_4",
    &setup_mmap_write_pdc_7_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pdc_7_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_5",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_6",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p370_7",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_1",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_2",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pdc_7_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_3",
    &setup_mmap_write_pbe_5_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pfe_4_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_4",
    &setup_mmap_write_pbe_2_common,
    { { &setup_mmap_write_pdc_9_proc0 }, { &setup_mmap_write_pb6_2_proc1 } },
    &setup_mmap_write_pfe_4_procfinal,
    &setup_mmap_write_pde_9_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_5",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_6",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p36_7",
    &setup_mmap_write_pbe_1_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p350_0",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pb50_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p350_1",
    &setup_mmap_write_pf4_6_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pb50_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p350_2",
    &setup_mmap_write_p350_2_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_p350_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p350_3",
    &setup_mmap_write_pf4_22_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pdc_1_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p340_0",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pb50_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p340_1",
    &setup_mmap_write_p340_1_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pb50_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p340_2",
    &setup_mmap_write_pf4_44_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pb50_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p340_3",
    &setup_mmap_write_pf0_6_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pb50_2_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p30_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p30_1",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p3f8_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_1",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_2",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_3",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pfe_3_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_4",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_p2fc_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_5",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_p2fc_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_6",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_p2fc_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2fc_7",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_p2fc_4_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_1",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_2",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pfc_8_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_3",
    &setup_mmap_write_pf0_44_common,
    { { &setup_mmap_write_p2f4_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_4",
    &setup_mmap_write_p2f4_4_common,
    { { &setup_mmap_write_p2f4_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_5",
    &setup_mmap_write_pf0_44_common,
    { { &setup_mmap_write_p2f4_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_6",
    &setup_mmap_write_p2f4_4_common,
    { { &setup_mmap_write_p2f4_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2f4_7",
    &setup_mmap_write_p2f4_7_common,
    { { &setup_mmap_write_p2f4_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pae_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_1",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pae_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_2",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pf8_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_3",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pf8_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_4",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pae_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_5",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pae_0_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_6",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pf8_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2e8_7",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pf8_7_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_1",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_p72_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_1_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_2",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p2d8_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_3",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_p2d8_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_4",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_p2d8_4_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_5",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_p2d8_5_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_6",
    &setup_mmap_write_pd0_2_common,
    { { &setup_mmap_write_p2d8_6_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2d8_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_7",
    &setup_mmap_write_pf0_18_common,
    { { &setup_mmap_write_p2d8_7_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_p2d8_4_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_8",
    &setup_mmap_write_p2d8_8_common,
    { { &setup_mmap_write_p2d8_6_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_p2d8_8_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_9",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_p2d8_5_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_9_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_10",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pf0_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_11",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_12",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_p2d8_12_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_12_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_13",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p2d8_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_14",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_15",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_16",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_12_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2d8_17",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_p2d8_17_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_17_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_1",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_2",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_p2c8_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2d8_1_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_3",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_p2c8_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_3_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_4",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p72_9_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_5",
    &setup_mmap_write_pd0_2_common,
    { { &setup_mmap_write_p2c8_5_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_6",
    &setup_mmap_write_pf0_27_common,
    { { &setup_mmap_write_pad0_3_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_6_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_7",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_p2c8_7_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_6_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_8",
    &setup_mmap_write_pf0_27_common,
    { { &setup_mmap_write_p2c8_8_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_3_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_9",
    &setup_mmap_write_pf4_21_common,
    { { &setup_mmap_write_p2c8_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2c8_9_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_10",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_p2d8_2_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_11",
    &setup_mmap_write_pf0_46_common,
    { { &setup_mmap_write_p2c8_11_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_12",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_p2c8_12_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_12_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_13",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_12_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_14",
    &setup_mmap_write_pf4_36_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_15",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_8_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_16",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2c8_17",
    &setup_mmap_write_pf4_36_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_8_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2a_0",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2a_1",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2a_2",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p2a_3",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_0",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_1",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_2",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_3",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_pde_3_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_4",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_p27c_4_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_5",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_p27c_4_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_6",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_p27c_4_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p27c_7",
    &setup_mmap_write_pf4_28_common,
    { { &setup_mmap_write_p27c_4_proc0 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_1",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_2",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_3",
    &setup_mmap_write_pdc_5_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_4",
    &setup_mmap_write_pf0_44_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_5",
    &setup_mmap_write_p2f4_4_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_6",
    &setup_mmap_write_pf0_44_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p274_7",
    &setup_mmap_write_p2f4_4_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_1",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_2",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_3",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_4",
    &setup_mmap_write_pbf8_5_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pf4_6_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_5",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_6",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pdc_1_proc0 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p268_7",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pb50_1_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_0",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_p258_0_proc0 }, { &setup_mmap_write_p258_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_1",
    &setup_mmap_write_pf4_12_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pa50_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_2",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pad0_3_proc0 }, { &setup_mmap_write_pd0_3_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_9_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_3",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pd0_3_proc1 }, { &setup_mmap_write_pd0_3_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p258_3_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_4",
    &setup_mmap_write_p258_4_common,
    { { &setup_mmap_write_pad0_3_proc0 }, { &setup_mmap_write_p258_4_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_2_final,
    { { &test_mmap_write_p2d8_12_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_5",
    &setup_mmap_write_p258_5_common,
    { { &setup_mmap_write_pad0_3_proc0 }, { &setup_mmap_write_p258_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2c8_3_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_6",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pd0_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_3_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_7",
    &setup_mmap_write_pf0_46_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_p258_4_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2d8_12_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_8",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_p258_8_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_9",
    &setup_mmap_write_pf0_27_common,
    { { &setup_mmap_write_p258_0_proc1 }, { &setup_mmap_write_p258_9_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_1_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_10",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_pd0_3_proc1 }, { &setup_mmap_write_pd0_3_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_9_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_11",
    &setup_mmap_write_pf0_27_common,
    { { &setup_mmap_write_pad0_3_proc0 }, { &setup_mmap_write_p258_9_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2c8_9_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_12",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_pd0_3_proc1 }, { &setup_mmap_write_p2d8_17_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_4_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p258_13",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pa8_0_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_8_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p248_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_1",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pd0_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_2",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_3",
    &setup_mmap_write_pf4_5_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pa50_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_4",
    &setup_mmap_write_pf4_61_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pd0_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_5",
    &setup_mmap_write_p258_5_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pa50_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2d8_10_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_6",
    &setup_mmap_write_pf4_3_common,
    { { &setup_mmap_write_p258_0_proc1 }, { &setup_mmap_write_pd0_3_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_9_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_7",
    &setup_mmap_write_pf4_36_common,
    { { &setup_mmap_write_pd0_5_proc1 }, { &setup_mmap_write_pa8_0_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_8",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_p248_8_proc0 }, { &setup_mmap_write_pd0_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_12_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_9",
    &setup_mmap_write_p248_9_common,
    { { &setup_mmap_write_p248_9_proc0 }, { &setup_mmap_write_p248_9_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p258_3_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_10",
    &setup_mmap_write_pf4_36_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pa8_0_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2d8_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_11",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pd0_5_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_12",
    &setup_mmap_write_pd0_2_common,
    { { &setup_mmap_write_pad0_3_proc0 }, { &setup_mmap_write_p258_4_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_4_final,
    { { &test_mmap_write_p2c8_12_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p248_13",
    &setup_mmap_write_pf4_1_common,
    { { &setup_mmap_write_p258_0_proc1 }, { &setup_mmap_write_p258_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p258_3_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p22_0",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p22_1",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pa8_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p22_2",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p22_3",
    &setup_mmap_write_pf4_15_common,
    { { &setup_mmap_write_pe0_1_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p2fc_2_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p1f_0",
    &setup_mmap_write_pfe_0_common,
    { { &setup_mmap_write_pfe_1_proc0 }, { &setup_mmap_write_pfe_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p1e_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfc_3_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p1c_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pf8_1_proc0 }, { &setup_mmap_write_pfe_0_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p1a_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_p9a_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p18_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_p9a_0_proc0 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pfc_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p10_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_1_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p10_1",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 0, "write" } },
    &cleanup },
  { "fs-mmap_write_p0f_0",
    &setup_mmap_write_pf4_31_common,
    { { &setup_mmap_write_pfe_1_proc1 }, { &setup_mmap_write_pde_1_proc1 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pfe_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p0e_0",
    &setup_mmap_write_pfc_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pfe_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p0c_0",
    &setup_mmap_write_pf8_0_common,
    { { &setup_mmap_write_pfe_0_proc1 }, { &setup_mmap_write_pf8_0_proc0 } },
    &setup_mmap_write_pfe_0_procfinal,
    &setup_mmap_write_pfe_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p0a_0",
    &setup_mmap_write_pf4_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p08_0",
    &setup_mmap_write_pf4_37_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pe0_1_proc0 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_final,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pdc_0_1, 1, "write" } },
    &cleanup },
  { "fs-mmap_write_p00_0",
    &setup_mmap_write_pe0_0_common,
    { { &setup_mmap_write_pf4_0_proc1 }, { &setup_mmap_write_pf4_0_proc1 } },
    &setup_mmap_write_pf4_0_procfinal,
    &setup_mmap_write_pf4_0_procfinal,
    { { &test_mmap_write_p1f_0_0, 0, "mmap" },
      { &test_mmap_write_pf8_0_1, 1, "write" } },
    &cleanup },
//+++ common
  {}
};
